/**
 * Copyright (c) 2017-present, Virida YEAwareness, Org. All rights reserved.
 *
 * Licensed under the MIT License.
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://opensource.org/licenses/mit-license.html
 *
 * Unless = required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *------------------------------------------------------------------------
 *
 * @module AppInterface
 * @description - Virida client-native app interface.
 *
 * @author Tuan Le (tuan.t.lei@gmail.com)
 *
 *------------------------------------------------------------------------
 * @format
 * @flow
 */
'use strict'; // eslint-disable-line

import { Hf } from 'hyperflow';

import { Ht, ThemeContext } from 'hypertoxin';

import React from 'react';

import ReactNative from 'react-native'; // eslint-disable-line

import AppIntroSlider from 'react-native-app-intro-slider';

import {
    createAppContainer,
    createBottomTabNavigator
} from 'react-navigation';

import AlertModal from '../../common/components/modals/alert-modal';

import MovingWaveView from '../../common/components/views/moving-wave-view';

import Theme from '../../common/theme';

import CONSTANT from '../../common/constant';

import EVENT from '../events/app-event';

const {
    Linking
} = ReactNative;

const {
    BodyScreen,
    RowLayout,
    ColumnLayout,
    FlatButton,
    IconImage,
    CoverImage,
    HeadlineText,
    InfoText
} = Ht;

const appIntroSlides = [
    {
        key: `0`,
        headline1: `Air Quality Is Important!`,
        headline2: ``,
        info1: `\tEvery year, millions of people die prematurely from air pollution related deaths.`,
        info2: `\tExposure to poor air quality has been linked to asthma, cardiovascular diseases, and even cancer.`,
        info3: ``,
        image1: require(`../../../assets/images/air-pollution-sources.png`),
        image2: null,
        image3: null,
        backgroundColor: Theme.color.palette.orange
    }, {
        key: `1`,
        headline1: `Particulate Matter Pollution`,
        headline2: ``,
        info1: `\tParticulate matter (PM) are microscopic dust or soot particles in the air that enter your body when breathing.`,
        info2: `\tA significant portion of PM pollution is generated by industrial processes via combustion of wood and fossil fuels.\nNatural disasters also contribute via wildfires.`,
        info3: ``,
        image1: require(`../../../assets/images/pm25-pollution.png`),
        image2: null,
        image3: null,
        backgroundColor: Theme.color.palette.red
    }, {
        key: `3`,
        headline1: `Why Should You Care?`,
        headline2: ``,
        info1: `\tParticulate matter can cause serious long term health issues to the human body.`,
        info2: `\tBeing microscopic, they can enter our blood stream and cross through our cell membranes.`,
        info3: ``,
        image1: require(`../../../assets/images/pm25-lung-disease.png`),
        image2: null,
        image3: null,
        backgroundColor: Theme.color.palette.purple
    }, {
        key: `4`,
        headline1: `Raising Awareness`,
        headline2: ``,
        info1: `\tIntroducing Project Virida. We want to provide a solution where people can monitor their surrounding air quality.`,
        info2: `\tWe design & build an air quality sensor that is affordable, portable, accurate, and integrated with smart devices.\n\tProject Virida aims to drive air quality and enviromental awareness.`,
        info3: ``,
        image1: require(`../../../assets/images/project-virida.png`),
        image2: null,
        image3: null,
        backgroundColor: Theme.color.palette.green
    }, {
        key: `5`,
        headline1: `What This App Can Do`,
        headline2: ``,
        info1: `Daily air quality report in your region with 5 days air quality forecast.`,
        info2: `List of pollutants in your region.`,
        info3: `Map view of air quality monitoring sites near you.`,
        image1: require(`../../../assets/images/app-feature1.png`),
        image2: require(`../../../assets/images/app-feature2.png`),
        image3: require(`../../../assets/images/app-feature3.png`),
        backgroundColor: Theme.color.palette.blue
    }, {
        key: `6`,
        headline1: `Welcome`,
        headline2: `And Thank You For Using Our App`,
        info1: ``,
        info2: `Youth Environmental Awareness (Y.E.A).`,
        info3: ``,
        image1: require(`../../../assets/logos/yea-logo.png`),
        image2: null,
        image3: null,
        backgroundColor: Theme.color.palette.teal
    }
];

let AppContainer;

const AppInterface = Hf.Interface.augment({
    composites: [
        Hf.React.ComponentComposite
    ],
    setup (done) {
        const intf = this;
        const [
            MonitorInterface,
            MapInferface,
            SettingInferface
        ] = intf.getComponentComposites(
            `monitor-interface`,
            `map-interface`,
            `setting-interface`
        );

        const AppBottomTabNavigator = createBottomTabNavigator({
            monitor: {
                screen: MonitorInterface,
                navigationOptions: () => {
                    return {
                        tabBarVisible: true,
                        tabBarLabel: `MONITOR`,
                        tabBarIcon: (style) => (
                            <IconImage
                                source = 'monitor'
                                size = 'large'
                                color = { style.tintColor }
                            />
                        )
                    };
                }
            },
            map: {
                screen: MapInferface,
                navigationOptions: () => {
                    return {
                        tabBarVisible: true,
                        tabBarLabel: `MAPS`,
                        tabBarIcon: (style) => (
                            <IconImage
                                source = 'map'
                                size = 'large'
                                color = { style.tintColor }
                            />
                        )
                    };
                }
            },
            setting: {
                screen: SettingInferface,
                navigationOptions: (props) => {
                    const {
                        navigation
                    } = props;
                    const routeParams = navigation.state.params;

                    return {
                        tabBarVisible: Hf.isObject(routeParams) ? routeParams.tabBarVisible : true,
                        tabBarLabel: `SETTINGS`,
                        tabBarIcon: (style) => (
                            <IconImage
                                source = 'setting'
                                size = 'large'
                                color = { style.tintColor }
                            />
                        )
                    };
                }
            }
        }, {
            swipeEnabled: false,
            animationEnabled: false,
            lazy: true,
            removeClippedSubviews: true,
            initialRouteName: `monitor`,
            transitionConfig: () => ({
                transitionSpec: {
                    duration: 300
                }
            }),
            tabBarOptions: {
                scrollEnabled: false,
                showIcon: true,
                activeTintColor: Theme.color.light.secondary,
                inactiveTintColor: Theme.color.light.primary,
                activeBackgroundColor: `transparent`,
                inactiveBackgroundColor: `transparent`,
                labelStyle: {
                    ...Theme.font.boldSmaller
                },
                tabStyle: {
                    justifyContent: `center`,
                    alignItems: `center`
                },
                style: {
                    zIndex: 10,
                    position: `absolute`,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    backgroundColor: Theme.color.palette.white
                }
            }
        });

        AppContainer = createAppContainer(AppBottomTabNavigator);

        done();
    },
    onPressGoToYEAFBButton () {
        Linking.canOpenURL(CONSTANT.URL.YEA_FB1).then((supported) => {
            if (supported) {
                return Linking.openURL(CONSTANT.URL.YEA_FB1);
            }
            return Linking.openURL(CONSTANT.URL.YEA_FB2);
        }).catch(() => {
            Hf.log(`warn1`, `Unable to open Y.E.A app or website at ${CONSTANT.URL.YEA_ABOUT}.`);
        });
    },
    onPressGoToAboutYEAInstagramButton () {
        Linking.openURL(CONSTANT.URL.YEA_INSTAGRAM).catch(() => {
            Hf.log(`warn1`, `Unable to open Y.E.A Instagram app or website at ${CONSTANT.URL.YEA_INSTAGRAM}.`);
        });
    },
    onPressGoToAboutProjectViridaButton () {
        Linking.openURL(CONSTANT.URL.YEA_PROJECT_VIRIDA).catch(() => {
            Hf.log(`warn1`, `Unable to open Project Virida website at ${CONSTANT.URL.YEA_PROJECT_VIRIDA}.`);
        });
    },
    renderAlertModal () {
        const component = this;
        const {
            alert
        } = component.state;

        return (
            <AlertModal
                visible = { alert.visible }
                alert = {{
                    title: alert.title,
                    message: alert.message
                }}
                onClose = {() => component.outgoing(EVENT.ON.CLOSE_ALERT_MODAL).emit()}
            />
        );
    },
    renderIntroSlide (slide) {
        const component = this;

        return (
            <BodyScreen
                coverImageSource = { require(`../../../assets/images/background-gradient.png`) }
                contentTopRoomAlignment = 'center'
                contentMiddleRoomAlignment = 'center'
                contentBottomRoomAlignment = 'stretch'
                color = { slide.backgroundColor }
            >
                <RowLayout
                    room = 'content-top'
                    contentTopRoomAlignment = 'center'
                    contentMiddleRoomAlignment = 'center'
                    margin = {{
                        top: 100,
                        bottom: 15,
                        horizontal: 5
                    }}
                >
                    {
                        !Hf.isEmpty(slide.headline1) ? <HeadlineText room = 'content-top' >{ slide.headline1 }</HeadlineText> : null
                    }
                    {
                        !Hf.isEmpty(slide.headline2) ? <HeadlineText room = 'content-middle' size = 'small' >{ slide.headline2 }</HeadlineText> : null
                    }
                </RowLayout>
                <RowLayout
                    room = 'content-middle'
                    contentTopRoomAlignment = 'center'
                    contentMiddleRoomAlignment = 'center'
                    margin = {{
                        horizontal: 5
                    }}
                >
                    {
                        !Hf.isEmpty(slide.info1) ? <InfoText room = 'content-top' size = 'large' >{ slide.info1 }</InfoText> : null
                    }
                    {
                        slide.image1 !== null ? <CoverImage
                            room = 'content-middle'
                            width = { slide.key === `5` ? 150 : 300 }
                            height = { slide.key === `5` ? 200 : 150 }
                            source = { slide.image1 }
                            margin = {{
                                vertical: 5
                            }}
                        /> : null
                    }
                    {
                        !Hf.isEmpty(slide.info2) ? <InfoText room = 'content-middle' size = 'large' >{ slide.info2 }</InfoText> : null
                    }
                    {
                        slide.image2 !== null ? <CoverImage
                            room = 'content-middle'
                            width = { slide.key === `5` ? 150 : 300 }
                            height = { slide.key === `5` ? 100 : 150 }
                            source = { slide.image2 }
                            margin = {{
                                vertical: 5
                            }}
                        /> : null
                    }
                    {
                        !Hf.isEmpty(slide.info3) ? <InfoText room = 'content-middle' size = 'large' >{ slide.info3 }</InfoText> : null
                    }
                    {
                        slide.key === `6` ? <ColumnLayout room = 'content-middle' >
                            <FlatButton
                                room = 'content-left'
                                overlay = 'transparent'
                                size = 'large'
                                onPress = { component.onPressGoToYEAFBButton }
                            >
                                <CoverImage
                                    room = 'content-middle'
                                    width = { 36 }
                                    height = { 36 }
                                    source = { require(`../../../assets/logos/fb-logo.png`) }
                                />
                            </FlatButton>
                            <FlatButton
                                room = 'content-right'
                                overlay = 'transparent'
                                size = 'large'
                                onPress = { component.onPressGoToAboutYEAInstagramButton }
                            >
                                <CoverImage
                                    room = 'content-middle'
                                    width = { 36 }
                                    height = { 36 }
                                    source = { require(`../../../assets/logos/instagram-logo.png`) }
                                />
                            </FlatButton>
                        </ColumnLayout> : null
                    }
                    {
                        slide.image3 !== null ? <CoverImage
                            room = 'content-middle'
                            width = { slide.key === `5` ? 150 : 300 }
                            height = { slide.key === `5` ? 150 : 150 }
                            source = { slide.image3 }
                            margin = {{
                                vertical: 5
                            }}
                        /> : null
                    }
                </RowLayout>
                <MovingWaveView
                    room = 'content-middle'
                    waves = {[{
                        color: Theme.color.palette.cyan,
                        opacity: 0.2,
                        lineThickness: 6,
                        amplitude: 50,
                        phase: 45,
                        verticalOffset: 305
                    }, {
                        color: Theme.color.palette.teal,
                        opacity: 0.15,
                        lineThickness: 3,
                        amplitude: 40,
                        phase: 90,
                        verticalOffset: 315
                    }, {
                        color: Theme.color.palette.deepBlue,
                        opacity: 0.1,
                        lineThickness: 10,
                        amplitude: 30,
                        phase: 120,
                        verticalOffset: 320
                    }]}
                />
                <RowLayout
                    room = 'content-bottom'
                    contentMiddleRoomAlignment = 'stretch'
                    margin = {{
                        top: 15,
                        horizontal: 5
                    }}
                >
                    {
                        slide.key === `4` ? <FlatButton
                            room = 'content-middle'
                            overlay = 'transparent'
                            label = 'ABOUT PROJECT VIRIDA'
                            color = { Theme.color.palette.green }
                            onPress = { component.onPressGoToAboutProjectViridaButton }
                        /> : null
                    }
                    {
                        slide.key === `6` ? <FlatButton
                            room = 'content-middle'
                            label = 'START'
                            onPress = {() => {
                                component.outgoing(EVENT.ON.INTRO_FINISHED).emit();
                            }}
                        /> : null
                    }
                </RowLayout>
            </BodyScreen>
        );
    },
    render () {
        const component = this;
        const {
            storageInitialized,
            showIntro
        } = component.state;

        if (storageInitialized) {
            if (showIntro) {
                return (
                    <ThemeContext.Provider value = {{
                        Theme
                    }}>
                        <AppIntroSlider
                            showSkipButton = { true }
                            showPrevButton = { true }
                            showDoneButton = { false }
                            nextLabel = 'NEXT'
                            prevLabel = 'PREV'
                            skipLabel = 'SKIP'
                            slides = { appIntroSlides }
                            renderItem = { component.renderIntroSlide }
                            buttonTextStyle = {{
                                color: Theme.color.palette.teal,
                                fontSize: 18,
                                padding: 12,
                                backgroundColor: `transparent`
                            }}
                            activeDotStyle = {{
                                backgroundColor: Theme.color.palette.red
                            }}
                            dotStyle = {{
                                backgroundColor: Theme.color.palette.lightGrey
                            }}
                            onSkip = {() => component.outgoing(EVENT.ON.INTRO_SKIPPED).emit()}
                        />
                    </ThemeContext.Provider>
                );
            }
            return (
                <ThemeContext.Provider value = {{
                    Theme
                }}>
                    <AppContainer
                        screenProps = {{
                            component
                        }}
                        onNavigationStateChange = {(prevState, currentState) => {
                            if (Hf.isObject(currentState)) {
                                const route = currentState.routes[currentState.index];
                                switch (route.routeName) {
                                case `monitor`:
                                    component.outgoing(EVENT.ON.GO_TO_MONITOR).emit();
                                    break;
                                case `map`:
                                    component.outgoing(EVENT.ON.GO_TO_MAP).emit();
                                    break;
                                case `setting`:
                                    component.outgoing(EVENT.ON.GO_TO_SETTING).emit();
                                    break;
                                default:
                                    break;
                                }
                            }
                            return null;
                        }}
                    />
                    {
                        component.renderAlertModal()
                    }
                </ThemeContext.Provider>
            );
        }
        return (
            <ThemeContext.Provider value = {{
                Theme
            }}>
                <BodyScreen coverImageSource = { require(`../../../assets/images/background-startup.png`) }/>
            </ThemeContext.Provider>
        );
    }
});

export default AppInterface;
